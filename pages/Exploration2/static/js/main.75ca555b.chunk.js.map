{"version":3,"sources":["components/Navigation/navigation.component.jsx","components/constants/routes.js","components/Home/home.component.jsx","components/Todos/todos.component.jsx","components/SignIn/sign-in.component.jsx","store/actions/authActions.js","components/Message/message.component.jsx","components/SignUp/sign-up.component.jsx","components/Logout/logout.component.jsx","App.js","serviceWorker.js","store/reducers/authReducer.js","store/reducers/index.js","firebase/firebase.utils.js","store/index.js","index.js"],"names":["Navigation","className","id","to","Home","src","data-icon","data-inline","Todos","LoginSchema","Yup","shape","email","required","password","mapDispatchToProps","login","data","dispatch","getState","a","getFirebase","firebase","type","auth","signInWithEmailAndPassword","payload","message","connect","loading","error","initialValues","validationSchema","onSubmit","values","setSubmitting","isSubmitting","isValid","name","for","msg","Message","children","show","SignUpSchema","firstname","lastname","min","passwordconfirm","oneOf","signUp","getFirestore","firestore","createUserWithEmailAndPassword","res","console","log","user","uid","collection","doc","set","logout","signOut","useEffect","loggedIn","exact","path","component","SignIn","SignUp","Logout","Boolean","window","location","hostname","match","initialState","combineReducers","state","firebaseReducer","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","composeEnhancers","compose","store","createStore","rootReducer","reactReduxFirebase","userProfile","useFirestoreForProfile","reduxFirestore","applyMiddleware","thunk","withExtraArgument","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.75ca555b.chunk.js","sourcesContent":["import React from 'react';\nimport { Link, NavLink } from 'react-router-dom';\nimport * as ROUTES from '../constants/routes';\nimport './navigation.component.styles.css';\n\nconst Navigation = () => {\n    return (\n        <div>\n            <nav>\n            <div className=\"nav-wrapper teal\">\n                <a className=\"brand-logo center\">Task.It</a>\n                <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\n                    <li>\n                        <Link to={ROUTES.HOME}>Home</Link>\n                    </li>\n                    <li>\n                        <Link to={ROUTES.TODOS}>Todos</Link>\n                    </li>\n                    <li>\n                        <Link to={ROUTES.SIGN_IN}>Sign In</Link>\n                    </li>\n                    <li>\n                        <Link to={ROUTES.SIGN_UP}>Sign Up</Link>\n                    </li>\n                    <li>\n                        <Link to={ROUTES.LOGOUT}>Log Out</Link>\n                    </li>\n                \n                </ul>\n            </div>\n            </nav>\n        </div>\n    );\n}\n\nexport default Navigation;","export const SIGN_UP = '/signup';\nexport const SIGN_IN = '/signin';\nexport const HOME = '/';\nexport const TODOS = '/todos';\nexport const LOGOUT = '/logout';\n// export const ACCOUNT = '/account';\n// export const ADMIN = '/admin';\n// export const PASSWORD_FORGET = '/pw-forget';","import React from 'react';\nimport './home.component.styles.css';\n\n\nconst Home = () => {\n    return(\n        \n        <div>\n            <div className=\"hero\">\n                \n                {/* <div className=\"btn-group center\">\n                    <a className=\"btn\">Sign In</a>\n                    <a className=\"btn\">Sign Up</a>\n                </div> */}\n            </div>\n            <div className=\"container\">\n                \n                <h1 className=\"center teal-text\" id=\"first\">Exploration</h1>\n                <h2 className=\"center teal-text\" id=\"second\">#2</h2>\n                <div className=\"row\">\n                <div className=\"col s12 m4 l4\">\n                        <div className=\"card\">\n                            <div className=\"card-content center\">\n                                <img src=\"https://img.icons8.com/color/96/000000/react-native.png\"></img>\n                                <div className=\"card-title\"><span>ReactJS</span></div>\n                                <hr />\n                            </div>\n                        </div>\n                </div>\n\n                <div className=\"col s12 m4 l4\">\n                        <div className=\"card\">\n                            <div className=\"card-content center\">\n                                <span className=\"iconify\" data-icon=\"simple-icons:redux\" data-inline=\"false\"></span>\n                                <div className=\"card-title\"><span>Redux</span></div>\n                                <hr />\n                            </div>\n                        </div>\n                </div>\n\n                <div className=\"col s12 m4 l4\">\n                        <div className=\"card\">\n                            <div className=\"card-content center\">\n                                <img src=\"https://img.icons8.com/color/96/000000/google-firebase-console.png\"></img>\n                                <div className=\"card-title\"><span>Google Firebase</span></div>\n                                <hr />\n                            </div>\n                        </div>\n                </div>\n                </div> \n            </div>\n        </div>\n    )\n}\n\nexport default Home;","import React from 'react';\n\nconst Todos = () => {\n    return (\n        <div>This is Todos page</div>\n    );\n}\n\nexport default Todos;","import React from 'react';\nimport { Formik, Form, Field, ErrorMessage} from 'formik';\nimport * as Yup from 'yup';\nimport './sign-in.component.styles.css';\nimport * as actions from '../../store/actions/authActions';\nimport { connect } from 'react-redux';\n\nconst LoginSchema = Yup.object().shape({\n    email: Yup.string()\n    .email('Invalid email!')\n    .required('The email is required!'),\n    password: Yup.string().required('Password is required!'),\n});\n\n\n\n\n\nconst SignIn = ({ login, loading, error}) => {\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col s12\">\n                <div className=\"card-panel teal center white-text\">Sign in with your email & password</div>\n                        <div className=\"card\" id=\"sign-in-card\">\n                            <div className=\"card-content\">\n                                <Formik initialValues={{ \n                                    email: '',\n                                    password: ''\n                                }} validationSchema={LoginSchema} onSubmit={async( values, {setSubmitting }) => {\n                                    await login(values);\n                                    setSubmitting(false);\n\n                                }}>\n\n\n                                    {({isSubmitting, isValid}) => (\n                                        <Form>\n                                            <div className='input-field'>\n                                            <i className=\"material-icons prefix teal-text\">person</i>\n                                                <Field type='email' name='email' className='validate' />\n                                                <label for='email'>Email</label>\n                                            </div>\n                                            <ErrorMessage name='email'>{msg => <span className='new badge red white-text'>{msg}</span>}</ErrorMessage>\n                                            <div className='input-field'>\n                                            <i className=\"material-icons prefix teal-text\">enhanced_encryption</i>\n                                                <Field type='password' name='password' className='validate' />\n                                                <label for=\"password\">Password</label>\n                                            </div>\n                                            <ErrorMessage name='password'>{msg => <span className='new badge red white-text'>{msg}</span>}</ErrorMessage>\n                                            <div className=\"center\">\n                                                <button className=\"waves-effect waves-light btn\" type=\"submit\" loading={loading ? 'Loggin in...' : null}>Sign In</button>\n                                            </div>\n                                        </Form>  \n                                    )}\n\n                                </Formik>\n                                \n                            </div>\n                        </div> {/*end card*/}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = ({ auth }) => ({\n    loading: auth.loading,\n    error: auth.error\n})\n\nconst mapDispatchToProps = {\n    login: actions.signIn\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignIn);","export const signUp = data => async (dispatch, getState, {getFirebase, getFirestore}) => {\n\n    const firebase = getFirebase();\n    const firestore = getFirestore();\n    dispatch({type: 'AUTH_START'});\n\n    try {\n        const res = await firebase\n        .auth()\n        .createUserWithEmailAndPassword(data.email, data.password);\n\n        console.log(res.user.uid);\n\n        await firestore\n        .collection('users').doc(res.user.uid).set({\n            firstname: data.firstname,\n            lastname: data.lastname\n        });\n        dispatch({ type: 'AUTH_SUCCESS' })\n    } catch(err) {\n        dispatch({ type: 'AUTH_FAIL', payload: err.message})\n    } //end catch\n\n\n    dispatch({ type: 'AUTH_END' });\n}\n\n//Logout action creator\n\nexport const signOut = () => async (dispatch, getState, {getFirebase}) => {\n    const firebase = getFirebase();\n\n    try {\n        await firebase.auth().signOut();\n\n    } catch(err) {\n        console.log(err.message);\n    }\n}\n\n//Sign in action creator\n\nexport const signIn = (data) => async (dispatch, getState, {getFirebase}) => {\n    const firebase = getFirebase();\n    dispatch({ type: 'AUTH_START'})\n\n    try {\n        await firebase.auth().signInWithEmailAndPassword(data.email, data.password);\n        dispatch({ type: 'AUTH_SUCCESS'})\n    } catch(err) {\n        dispatch({ type: 'AUTH_FAIL', payload: err.message });\n    }\n\n    dispatch({ type: 'AUTH_END' })\n}","import React from 'react';\n\nconst Message = ({ children, error, show }) => {\n    return (\n        <span className=\"new badge red white-text\" error={error} show={show}>{ children }</span>\n    )\n}\n\nexport default Message;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Formik, Form, Field, ErrorMessage} from 'formik';\nimport * as Yup from 'yup';\nimport Message from '../Message/message.component';\nimport './sign-up.component.styles.css';\n\nimport * as actions from '../../store/actions';\n\nconst SignUpSchema = Yup.object().shape({\n    firstname: Yup.string().required('First name required!'),\n    lastname: Yup.string().required('Last name required!'),\n    email: Yup.string()\n    .email('Invalid email!')\n    .required('The email is required!'),\n    password: Yup.string().required('Password is required')\n    .min(8, 'Password must be at least 8 characters!'),\n    passwordconfirm: Yup.string()\n    .oneOf([Yup.ref('password'), null], `Passwords do not match!`)\n    .required('Confirm password!')\n});\n\n\nconst SignUp = ({ signUp, loading, error, show}) => {\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col s12 m12 l12\">\n                    <div className=\"card\">\n                        <div className=\"card-content\">\n                            <div className=\"card-panel teal center white-text\">\n                                <h5>Password Guidelines</h5>\n                                <ul>\n                                    <li>At least 8 characters in length</li>\n                                    <li>One Uppercase</li>\n                                    <li>One Lowercase</li>\n                                    <li>One Number</li>\n                                    <li>One Special Case Character</li>\n                                </ul>\n                            </div>\n                            <Formik initialValues={{ \n                                firstname: '',\n                                lastname: '',\n                                email: '',\n                                password: '',\n                                passwordconfirm: ''\n                            }} validationSchema={SignUpSchema} onSubmit={( values, {setSubmitting }) => {\n                                console.log(values);\n                                signUp(values)\n                                setSubmitting(false)\n                            }}>\n\n\n                                {({isSubmitting, isValid}) => (\n                                    <Form>\n                                            <div className='row'>\n                                                <div className='input-field col s12'>\n                                                    <i className=\"material-icons prefix teal-text\">person</i>\n                                                    <Field type=\"text\" name=\"firstname\" className=\"validate\" />\n                                                    <label for=\"firstname\">First Name</label>\n                                                </div>\n                                                <ErrorMessage name='firstname'>{msg => <span className='new badge red white-text'>{msg}</span>}</ErrorMessage>\n                                                <div className='input-field col s12'>\n                                                    <i className=\"material-icons prefix teal-text\">person_outline</i>\n                                                    <Field type='text' name='lastname' className='validate' />\n                                                    <label for='lastname'>Last Name</label>\n                                                </div>\n                                                <ErrorMessage name='lastname'>{msg => <span className='new badge red white-text'>{msg}</span>}</ErrorMessage>\n                                                <div className='input-field col s12'>\n                                                    <i className=\"material-icons prefix teal-text\">email</i>\n                                                    <Field type='email' name='email' className='validate' />\n                                                    <label for='email'>Email</label>\n                                                </div>\n                                                <ErrorMessage name='email'>{msg => <span className='new badge red white-text'>{msg}</span>}</ErrorMessage>\n                                                <div className='input-field col s12'>\n                                                    <i className=\"material-icons prefix teal-text\">enhanced_encryption</i>\n                                                    <Field type='password' name='password' className='validate' />\n                                                    <label for=\"password\">Password</label>\n                                                </div>\n                                                <ErrorMessage name='password'>{msg => <span className='new badge red white-text'>{msg}</span>}</ErrorMessage>\n                                                <div className='input-field col s12'>\n                                                    <i className=\"material-icons prefix teal-text\">enhanced_encryption</i>\n                                                    <Field type='password' name='passwordconfirm' className='validate' />\n                                                    <label for='passwordconfirm'>Confirm Password</label>\n                                                </div>\n                                                <ErrorMessage name='passwordconfirm'>{msg => <span className='new badge red white-text'>{msg}</span>}</ErrorMessage>\n                                                <button className=\"waves-effect waves-light btn\" loading={loading ? 'Signing Up' : null} type=\"submit\">Submit</button>\n                                                <br />\n                                                <Message error={error} show={show}>{ error }</Message>\n                                                    \n                                            </div>\n                                    </Form>  \n                                )}\n\n                            </Formik>\n                              \n                        </div>\n                    </div>\n                </div>\n\n    \n            </div>\n        </div>\n    );\n}\n\n//gives access to props on form values\nconst mapStateProps = ({auth}) => ({\n    loading: auth.loading,\n    error: auth.error\n})\n\n//pass actions to dispatch\nconst mapDispatchToProps = {\n    signUp: actions.signUp\n}\n\nexport default connect(mapStateProps, mapDispatchToProps)(SignUp);","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions/authActions';\n\nconst Logout = ({ logout }) => {\n    useEffect(() => {\n        logout();\n    }, [logout]);\n    return null;\n}\n\nconst mapDispatchToProps = {\n    logout: actions.signOut\n}\n\nexport default connect(null, mapDispatchToProps)(Logout);","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Navigation from './components/Navigation/navigation.component';\nimport Home from './components/Home/home.component';\nimport Todos from './components/Todos/todos.component';\nimport SignIn from './components/SignIn/sign-in.component';\nimport SignUp from './components/SignUp/sign-up.component';\nimport Logout from './components/Logout/logout.component';\nimport * as ROUTES from './components/constants/routes';\nimport './App.css';\nimport { auth } from 'firebase';\n\nconst App = ({ loggedIn }) => {\n  // console.log(loggedIn);\n\n  // let routes;\n\n  // if (loggedIn) {\n  //   routes = (\n  //     <>\n  //         <Route exact path={ROUTES.HOME} component={Home} />\n  //         <Route path={ROUTES.TODOS} component={Todos} />\n  //         <Route path={ROUTES.LOGOUT} component={Logout} />\n  //     </>\n  //   )\n  // } else {\n  //   routes = (\n  //    <>\n  //       <Route exact path={ROUTES.HOME} component={Home} />\n  //       <Route path={ROUTES.TODOS} component={Todos} />\n  //       <Route path={ROUTES.SIGN_IN} component={SignIn} />\n  //       <Route path={ROUTES.SIGN_UP} component={SignUp} />\n  //     </>\n  //   )\n  // }\n\n  return(\n\n      <div>\n        <Navigation />\n          <Route exact path={ROUTES.HOME} component={Home} />\n          <Route path={ROUTES.TODOS} component={Todos} />\n          <Route path={ROUTES.SIGN_IN} component={SignIn} />\n          <Route path={ROUTES.SIGN_UP} component={SignUp} />\n          <Route path={ROUTES.LOGOUT} component={Logout} />\n      </div> \n    \n  );\n}\n\n\n\n\n\nconst mapStateToProps = ({ firebase }) => ({\n  loggedIn: firebase.auth.uid ? true : null\n})\n\nexport default connect(mapStateToProps) (App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n    error: null,\n    loading: false\n};\n\nexport default (state = initialState, { type, payload }) => {\n\n    switch (type) {\n        case 'AUTH_START':\n            return {...state, loading: true}\n        \n        case 'AUTH_END':\n            return {...state, loading: false}\n\n        case 'AUTH_FAIL':\n            return {...state, error: payload}\n            \n        case 'AUTH_SUCCESS':\n            return {...state, error: false}\n        default:\n            return state;\n    } //end switch\n\n\n};","import { combineReducers } from 'redux';\nimport { firebaseReducer } from 'react-redux-firebase';\nimport authReducer from './authReducer';\n\n\nexport default combineReducers({\n    auth: authReducer,\n    firebase: firebaseReducer\n});","import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n    apiKey: \"AIzaSyAE4xLsR1HY8mte3BwRy7XQaP9gwYYVa4U\",\n    authDomain: \"react-notes-87738.firebaseapp.com\",\n    databaseURL: \"https://react-notes-87738.firebaseio.com\",\n    projectId: \"react-notes-87738\",\n    storageBucket: \"react-notes-87738.appspot.com\",\n    messagingSenderId: \"389619493386\",\n    appId: \"1:389619493386:web:c4730f4c09fd9201b4cdf3\"\n}\n\nfirebase.initializeApp(config);\nfirebase.firestore();\n\nexport default firebase;","import { compose, createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\nimport firebase from '../firebase/firebase.utils';\nimport  { reactReduxFirebase, getFirebase } from 'react-redux-firebase';\nimport { reduxFirestore, getFirestore } from 'redux-firestore';\n\n//react-redux-firebase config\nconst rrfConfig = {\n    userProfile: 'users',\n    useFirestoreForProfile: true,\n}\n\nconst composeEnhancers = process.env.NODE_ENV === 'development' ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose : compose;\n\nconst store = createStore(\n    rootReducer,\n    composeEnhancers(\n        reactReduxFirebase(firebase, rrfConfig),\n        reduxFirestore(firebase),\n        applyMiddleware(thunk.withExtraArgument({ getFirebase, getFirestore }))\n    )\n);\n\nexport default store;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>,\n    \ndocument.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}